// intended for griding and structure of html
@import "variables";
@import "mixin";
$gutter-compensation: ($gutter-width * 0.5);

.max-container {
  display: block;
  flex-wrap: wrap;
  max-width: calc(1300px - 8rem);

  @include screen(web) {
    width: calc(100% - 8rem);
    margin: 4rem auto;
  }

  @include screen(tablet) {
    width: calc(100% - 4rem);
    margin: 2rem auto;
  }

  @include screen(mobile) {
    width: calc(100% - 2rem);
    margin: 1rem auto;
  }
}

.container-fluid {
  margin-right: auto;
  margin-left: auto;
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.row {
  @include d-flex();
  box-sizing: border-box;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;

  & > * {
    box-sizing: border-box;
  }
}

.row-r {
  @include d-flex();
  box-sizing: border-box;
  flex: 0 1 auto;
  flex-direction: row-reverse;
  flex-wrap: wrap;

  & > * {
    box-sizing: border-box;
  }
}

.row-no-wrap {
  @include d-flex();
  box-sizing: border-box;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: nowrap;

  & > * {
    box-sizing: border-box;
  }
}

.row-inline {
  @include d-inline-flex();
  box-sizing: border-box;
  flex-direction: row;
  flex-wrap: wrap;
}

.column {
  @include d-flex();
  box-sizing: border-box;
  flex-direction: column;

  &.full {
    & > * {
      width: 100%;
    }
  }
}

.col {
  @include make-col(0, $grid-columns);
}

.no-wrap {
  flex-wrap: nowrap;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    @include make-col($i, $grid-columns);
    @include glutter($i);
  }
}

.start {
  @include d-flex();
  justify-content: flex-start;
  text-align: start;
}

.center {
  @include d-flex();
  justify-content: center;
}

.end {
  @include d-flex();
  justify-content: flex-end;
  text-align: end;
}

.top {
  @include d-flex();
  align-items: flex-start;
}

.mid {
  @include d-flex();
  align-items: center;
}

.bot {
  @include d-flex();
  align-items: flex-end;
}

.around {
  @include d-flex();
  justify-content: space-around;
}

.between {
  @include d-flex();
  justify-content: space-between;
}

.evenly {
  @include d-flex();
  justify-content: space-evenly;
}

.baseline {
  @include d-flex();
  align-items: baseline;
}

.stretch {
  @include d-flex();
  align-items: stretch;
}

@each $breakpoint in $breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);

  @media only screen and #{$size} {
    .col-#{$name} {
      @include make-col(0, $grid-columns);
    }

    @for $i from 1 through $grid-columns {
      .col-#{$name}-#{$i} {
        @include make-col($i, $grid-columns);
        @include glutter($i);
      }
    }

    .col-#{$name} {
      @include make-col($grid-columns, $grid-columns);
    }

    .start-#{$name} {
      @include d-flex();
      justify-content: flex-start;
      text-align: start;
    }

    .center-#{$name} {
      @include d-flex();
      justify-content: center;
    }

    .end-#{$name} {
      @include d-flex();
      justify-content: flex-end;
      text-align: end;
    }

    .top-#{$name} {
      @include d-flex();
      align-items: flex-start;
    }

    .mid-#{$name} {
      @include d-flex();
      align-items: center;
    }

    .bot-#{$name} {
      @include d-flex();
      align-items: flex-end;
    }

    .around-#{$name} {
      @include d-flex();
      justify-content: space-around;
    }

    .between-#{$name} {
      @include d-flex();
      justify-content: space-between;
    }

    .evenly-#{$name} {
      @include d-flex();
      justify-content: space-evenly;
    }

    .baseline-#{$name} {
      @include d-flex();
      align-items: baseline;
    }

    .stretch-#{$name} {
      @include d-flex();
      align-items: stretch;
    }
  }
}
